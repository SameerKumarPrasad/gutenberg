
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{g-2d}[2011/09/01 Commands internal to gradians.com for 2D coordinate geometry] 

\newcommand{\eSlope}[2] {
  \dfrac{y_{#2} - y_{#1}}{x_{#2} - x_{#1}}
} 

\newcommand{\fSlope}[2] {
  m_{#1} = \eSlope{#1}{#2}
} 

\newcommand{\eAngleOfIntersection}[2] {
  \dfrac{m_{#1} - m_{#2}}{1 + m_{#1}\cdot m_{#2}} 
} 

\newcommand{\fAngleOfIntersection}[2] {
  \tan\theta_{#1} = \eAngleOfIntersection{#1}{#2}
} 

% (y-y_n)/(x-x_n) = m_n
\newcommand{\fEqnSlope}[1][1] {
  \dfrac{ y - y_{#1} }{x - x_{#1}} = m_{#1}
} 

% x/a_#1 + y/b_#1 = 1
\newcommand{\fEqnIntercepts}[1][1]{ 
  \dfrac{x}{a_#1} + \dfrac{y}{b_#1} = 1
} 

\newcommand{\fEqnStandardLine}[1][1] {
  A_{#1}\cdot x + B_{#1}\cdot y + C_{#1} = 0
} 

\newcommand{\fEqnSlopeIntercept}[1][1] {
  y = m_{#1}\cdot x + C_{#1}
} 

% Expression for distance between point (x_m,y_m) and line L_n (A_n x+B_n y+C_n)
\newcommand{\eDistanceToLine}[2] {
  \dfrac{\vert\, A_{#2}\cdot x_{#1} + B_{#2}\cdot y_{#1} + C_{#2}\, \vert}{\sqrt{A_{#2}^2 + B_{#2}^2}}
} 
\newcommand{\fDistanceToLine}[2] {
  D_{#1} = \eDistanceToLine{#1}{#2}
} 

% Distance between two parallel lines with slope = m_i and constants C_j and C_k
\newcommand{\eDistanceParallel}[3][1] {
  \dfrac{\vert\, C_{#2} - C_{#3} \,\vert}{\sqrt{1 + m_{#1}^2}}
} 
\newcommand{\fDistanceParallel}[3][1] {
  D_{#2,#3} = \eDistanceParallel[#1]{#2}{#3}
} 

% Slope = (#5/#6) for a line joining (#1,#2) and (#3,#4)
\newcommand\LINESLOPE[6]{
  \SUBTRACT{#4}{#2}\tmy
  \SUBTRACT{#3}{#1}\tmx
  \FRACTIONSIMPLIFY\tmy\tmx{#5}{#6}
}

% Gets the intercept for (y-#2)/(x-#1) = #3/#4 when expressed in y = mx + C form 
\newcommand\LINEINTERCEPT[6]{
  \MULTIPLY{#2}{#4}\tma
  \MULTIPLY{#3}{#1}\tmb
  \SUBTRACT\tma\tmb\tmc
  \FRACTIONSIMPLIFY{\tmc}{#4}{#5}{#6}
}

%%% Rendering polynomials
\newbool{isFirstPolyTerm}
\newcommand{\poly@pwr}{}
\newcommand{\startpoly}{\setbool{isFirstPolyTerm}{true}}

\newcommand\WRITEPOLYTERM[3][x]{ 
  % #1 = independent variable, #2 = coefficient, #3 = raised to power, 
  \ABSVALUE{#2}\kf
  \ABSVALUE{#3}\pw
  \ifnumcomp{\pw}{=}{1}{\renewcommand{\poly@pwr}{}}{\renewcommand{\poly@pwr}{\pw}}
%
  \ifnumcomp{#3}{>}{0}{ % x raised to positive power 
    \ifnumcomp\kf{=}{1}{ % +1x or -1x 
      \ifnumcomp{#2}{<}{0}{-#1^{\poly@pwr}}{
        \ifbool{isFirstPolyTerm}{#1^{\poly@pwr}}{+#1^{\poly@pwr}}
      }
    }{ % coefficient != +1 or -1 
      \ifnumcomp{#2}{<}{0}{#2 #1^{\poly@pwr}}{
        \ifbool{isFirstPolyTerm}{#2 #1^{\poly@pwr}}{+#2 #1^{\poly@pwr}}
      }
    }
  }{
    \ifnumcomp{#3}{<}{0}{ % Example: x^{-2}
      \ifnumcomp{#2}{<}{0}{-\dfrac\kf{#1^{\poly@pwr}}}{
        \ifbool{isFirstPolyTerm}{\dfrac\kf{#1^{\poly@pwr}}}{+\dfrac\kf{#1^{\poly@pwr}}}
      }
    }{ % Example: x^0 => just the coefficient
      \ifnumcomp{#2}{<}{0}{#2}{
        \ifbool{isFirstPolyTerm}{#2}{+#2}
      }
    }
  }
  \setbool{isFirstPolyTerm}{false}
}

\newcommand\cf@x{}
\newcommand\cf@y{}
\newcommand\konst{}

% write y = #1/#2 x + #3/#4 in ax + by + c = 0 form
\newcommand\WRITELINEEQUALSZERO[4]{
  \LCM{#2}{#4}\cf@y
  \DIVIDE\cf@y{#2}\wl@x
  \DIVIDE\cf@y{#4}\wl@k
  \MULTIPLY\wl@x{#1}\cf@x
  \MULTIPLY\wl@k{#3}\konst
  \ifnumcomp{\cf@x}{<}{0}{
    \MULTIPLY\cf@x{-1}\cf@x
    \MULTIPLY\konst{-1}\konst
  }{
    \MULTIPLY\cf@y{-1}\cf@y
  }
  \startpoly\WRITEPOLYTERM\cf@x{1}\WRITEPOLYTERM[y]\cf@y{1}\WRITEPOLYTERM[]\konst{1} = 0
}


% Write #1/#2 x + #3/#4 as a clean polynomial
\newcommand\WRITELINEMXPLUSC[4]{
  \ifnumequal{#1}{#2}{
    \renewcommand\cf@x{1}
  }{
    \ifnumequal{#1}{-#2}{
      \renewcommand\cf@x{-1}
   }{
      \renewcommand\cf@x{100}
    }
  }
  \ifnumequal{#1}{0}{\renewcommand\cf@x{0}}{}
  \ifnumequal\cf@x{0}{
    \WRITEFRAC[false]{#3}{#4}
  }{
    \ifnumequal\cf@x{100}{
      \WRITEFRAC[false]{#1}{#2} x
    }{
      \ifnumequal\cf@x{1}{x}{-x}
    }
    \ifnumcomp{#3}{<}{0}{
      \ABSVALUE{#3}\tmo 
      -\WRITEFRAC[false]\tmo{#4}
    }{+\WRITEFRAC[false]{#3}{#4}}
  }
}
% alias for backward compatibility
\newcommand\WRITELINE\WRITELINEMXPLUSC
