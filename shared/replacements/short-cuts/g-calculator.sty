
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{g-calculator}[2011/09/01 Wrappers for common methods in fp package - tweaked for use internally] 
\RequirePackage{fp}

\newcommand{\gcalcadd}[3]{ % #1 = (#2 + #3).round(2)
  \FPadd{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcsub}[3]{ % #1 = (#2 - #3).round(2)
  \FPsub{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcmult}[3]{ % #1 = (#2 * #3).round(2)
  \FPmul{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcdiv}[3]{ % #1 = (#2 / #3).round(2)
  \FPdiv{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

% Arguments: 
  % #1 (optional) = precision
  % #2 (reqd) = variable holding the result 
  % #3 (reqd) = expression
\newcommand{\gcalcexpr}[3][2] { % #2 = eval(#3).round(#1)
  \FPeval{#2}{(#3)}
  \FPround{#2}{#2}{#1}
}

\newcommand{\gcalcSumOfSquares}[4][2] { % #2 = #3^2 + #4^2 to #1 precision
  % \FPpow uses logs and then anti-logs to calculate power. Which means, it gets stumped 
  % when calculating squares of negative numbers because their logs are not defined
  \gcalcexpr[2]{\tmp}{#3 * #3}
  \gcalcexpr[2]{\tmpp}{#4 * #4}
  \FPadd{#2}{\tmp}{\tmpp}
  \FPround{#2}{#2}{#1}
} 

\newcommand{\gcalcHypotenuse}[4][2] { % #2 = sqrt(#3^2 + #4^2) to #1 precision
  \gcalcSumOfSquares{#2}{#3}{#4}
  \FPpow{#2}{#2}{0.5}
  \FPround{#2}{#2}{#1}
} 

\newcommand\WRITEFRAC\gWriteFrac % alias
\newcommand{\gWriteFrac}[2]{ % #1 = num, #2 = denom
  \FRACTIONSIMPLIFY{#1}{#2}\tmp\tmq
  % After simplification, any negative sign is on the numerator only => \tmq > 0
  \ifthenelse{\tmq = 1}{
    \tmp
  }{
    \ifthenelse{\tmp < 0}{
      \frac\tmp\tmq
    }{
      \frac\tmp\tmq
    } 
  }
}

\newcommand\FRACADD\gFracAdd
\newcommand{\gFracAdd}[6] { % (#1)/(#2) + (#3)/(#4) = #5/#6
  \gcalcexpr[0]\tp{((#1) * (#4)) + ((#2) * ((#3)))}
  \gcalcexpr[0]\tq{((#2) * (#4))}
  \COPY\tp{#5}
  \COPY\tq{#6}
} 

\newcommand\FRACMINUS\gFracSubtract
\newcommand{\gFracSubtract}[6]{ % (#1)/(#2) - (#3)/(#4) = #5/#6
  \gcalcexpr[0]\tp{((#1) * (#4)) - ((#2) * (#3))}
  \gcalcexpr[0]\tq{((#2) * (#4))}
  \COPY\tp{#5}
  \COPY\tq{#6}
}

\newcommand\FRACMULT\gFracMultiply
\newcommand{\gFracMultiply}[6]{ % (#1)/(#2) x (#3)/(#4) = #5/#6
  \gcalcexpr[0]\tp{((#1) * (#3))}
  \gcalcexpr[0]\tq{((#2) * (#4))}
  \COPY\tp{#5}
  \COPY\tq{#6}
}

\newcommand\FRACDIV\gFracDivide
\newcommand{\gFracDivide}[6]{ % ((#1)/(#2)) / ((#3)/(#4)) = #5/#6
  \gcalcexpr[0]\tp{((#1) * (#4))}
  \gcalcexpr[0]\tq{((#2) * (#3))}
  \COPY\tp{#5}
  \COPY\tq{#6}
}

\newcommand{\FRACL}[6]{ % Calculates (#1)x + (#2) for a fraction (#3)/(#4). Result = #5/#6 ( (#1), (#2) integers )
  \FRACMULT{(#1)}{1}{(#3)}{(#4)}\tp\tq
  \FRACADD\tp\tq{(#2)}{1}\tp\tq
  \COPY\tp{#5}
  \COPY\tq{#6}
} 

