
\NeedsTeXFormat{LaTeX2e}[1994/06/01]
\ProvidesPackage{g-calculator}[2011/09/01 Wrappers for common methods in fp package - tweaked for use internally] 
\RequirePackage{fp}

\newcommand{\gcalcadd}[3]{ % #1 = (#2 + #3).round(2)
  \FPadd{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcsub}[3]{ % #1 = (#2 - #3).round(2)
  \FPsub{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcmult}[3]{ % #1 = (#2 * #3).round(2)
  \FPmul{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

\newcommand{\gcalcdiv}[3]{ % #1 = (#2 / #3).round(2)
  \FPdiv{#1}{#2}{#3}
  \FPround{#1}{#1}{2}
}

% Arguments: 
  % #1 (optional) = precision
  % #2 (reqd) = variable holding the result 
  % #3 (reqd) = expression
\newcommand{\gcalcexpr}[3][2] { % #2 = eval(#3).round(#1)
  \FPeval{#2}{(#3)}
  \FPround{#2}{#2}{#1}
}

\newcommand{\gcalcSumOfSquares}[4][2] { % #2 = #3^2 + #4^2 to #1 precision
  % \FPpow uses logs and then anti-logs to calculate power. Which means, it gets stumped 
  % when calculating squares of negative numbers because their logs are not defined
  \gcalcexpr[2]{\tmp}{#3 * #3}
  \gcalcexpr[2]{\tmpp}{#4 * #4}
  \FPadd{#2}{\tmp}{\tmpp}
  \FPround{#2}{#2}{#1}
} 

\newcommand{\gcalcHypotenuse}[4][2] { % #2 = sqrt(#3^2 + #4^2) to #1 precision
  \gcalcSumOfSquares{#2}{#3}{#4}
  \FPpow{#2}{#2}{0.5}
  \FPround{#2}{#2}{#1}
} 

\newcommand{\gWriteFrac}[2]{ % #1 = num, #2 = denom
  \FRACTIONSIMPLIFY{#1}{#2}\tmp\tmq
  \ifthenelse{\tmq = -1}{
    \gcalcexpr[0]\tmp{\tmp * -1}
    \tmp
  }{ 
    \ifthenelse{\tmq = 1}{\tmp}{\frac{\tmp}{\tmq}}
  }
}

\newcommand{\gFracAdd}[4] { % a/b + c/d
  \gcalcexpr[0]\tp{(#1 * #4) + (#2 * #3)}
  \gcalcexpr[0]\tq{#2 * #4}
  \gWriteFrac\tp\tq
} 

\newcommand{\gFracSubtract}[4]{
  \gcalcexpr[0]\tp{(#1 * #4) - (#2 * #3)}
  \gcalcexpr[0]\tq{#2 * #4}
  \gWriteFrac\tp\tq
}

\newcommand{\gFracMult}[4]{
  \gcalcexpr[0]\tp{#1 * #3}
  \gcalcexpr[0]\tq{#2 * #4}
  \gWriteFrac\tp\tq
}

\newcommand{\gFracDivide}[4]{ % (a/b) / (c/d) = ad/bc
  \gcalcexpr[0]\tp{#1 * #4}
  \gcalcexpr[0]\tq{#2 * #3}
  \gWriteFrac\tp\tq
}

